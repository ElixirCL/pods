searchData={"content_type":"text/markdown","items":[{"doc":"Core Pods. Handles the communication to the Pod process and the Pod Client","ref":"Pods.html","title":"Pods","type":"module"},{"doc":"Calls the `describe` operand from a pod","ref":"Pods.html#describe/2","title":"Pods.describe/2","type":"function"},{"doc":"Calls the `invoke` operand from a pod","ref":"Pods.html#invoke/4","title":"Pods.invoke/4","type":"function"},{"doc":"Returns a map with the module and manifest","ref":"Pods.html#setup/2","title":"Pods.setup/2","type":"function"},{"doc":"Calls the `shutdown` operand from a pod","ref":"Pods.html#shutdown/2","title":"Pods.shutdown/2","type":"function"},{"doc":"","ref":"Pods.html#start/5","title":"Pods.start/5","type":"function"},{"doc":"Stops all the pods inside the registry","ref":"Pods.html#stop/2","title":"Pods.stop/2","type":"function"},{"doc":"Decodes messages from the pod process","ref":"Pods.Decoder.html","title":"Pods.Decoder","type":"behaviour"},{"doc":"","ref":"Pods.Decoder.html#c:decode/2","title":"Pods.Decoder.decode/2","type":"callback"},{"doc":"","ref":"Pods.Decoder.html#c:decode!/2","title":"Pods.Decoder.decode!/2","type":"callback"},{"doc":"Encodes messages to send to the pod process","ref":"Pods.Encoder.html","title":"Pods.Encoder","type":"behaviour"},{"doc":"","ref":"Pods.Encoder.html#c:encode/2","title":"Pods.Encoder.encode/2","type":"callback"},{"doc":"","ref":"Pods.Encoder.html#c:encode!/2","title":"Pods.Encoder.encode!/2","type":"callback"},{"doc":"Defines the handlers for the Pod lifecycle events","ref":"Pods.Handler.html","title":"Pods.Handler","type":"behaviour"},{"doc":"","ref":"Pods.Handler.html#c:error/1","title":"Pods.Handler.error/1","type":"callback"},{"doc":"","ref":"Pods.Handler.html#c:event/2","title":"Pods.Handler.event/2","type":"callback"},{"doc":"","ref":"Pods.Handler.html#c:exception/1","title":"Pods.Handler.exception/1","type":"callback"},{"doc":"","ref":"Pods.Handler.html#c:success/1","title":"Pods.Handler.success/1","type":"callback"},{"doc":"This is the process manager. Implements how the pods will be started on the operating system and provides the main stdio interface for pod communication.","ref":"Pods.Manager.html","title":"Pods.Manager","type":"behaviour"},{"doc":"","ref":"Pods.Manager.html#c:init/0","title":"Pods.Manager.init/0","type":"callback"},{"doc":"","ref":"Pods.Manager.html#c:send/2","title":"Pods.Manager.send/2","type":"callback"},{"doc":"","ref":"Pods.Manager.html#c:start/5","title":"Pods.Manager.start/5","type":"callback"},{"doc":"","ref":"Pods.Manager.html#c:stop/1","title":"Pods.Manager.stop/1","type":"callback"},{"doc":"Handles the meta data for running the pod process in the OS","ref":"Pods.Manifest.html","title":"Pods.Manifest","type":"behaviour"},{"doc":"","ref":"Pods.Manifest.html#c:description/0","title":"Pods.Manifest.description/0","type":"callback"},{"doc":"","ref":"Pods.Manifest.html#c:executable/1","title":"Pods.Manifest.executable/1","type":"callback"},{"doc":"","ref":"Pods.Manifest.html#c:format/0","title":"Pods.Manifest.format/0","type":"callback"},{"doc":"","ref":"Pods.Manifest.html#c:namespace/1","title":"Pods.Manifest.namespace/1","type":"callback"},{"doc":"","ref":"Pods.Manifest.html#c:opts/0","title":"Pods.Manifest.opts/0","type":"callback"},{"doc":"The main public api for the Pod process.","ref":"Pods.Pod.html","title":"Pods.Pod","type":"behaviour"},{"doc":"","ref":"Pods.Pod.html#c:describe/1","title":"Pods.Pod.describe/1","type":"callback"},{"doc":"","ref":"Pods.Pod.html#c:invoke/3","title":"Pods.Pod.invoke/3","type":"callback"},{"doc":"","ref":"Pods.Pod.html#c:manifest/0","title":"Pods.Pod.manifest/0","type":"callback"},{"doc":"","ref":"Pods.Pod.html#c:setup/0","title":"Pods.Pod.setup/0","type":"callback"},{"doc":"","ref":"Pods.Pod.html#c:shutdown/1","title":"Pods.Pod.shutdown/1","type":"callback"},{"doc":"# Elixir Pods\n\n_Elixir Pods_ is a way of communication between _Elixir_ and a service\nimplemented in any programming language (`pod`). This service must adhere to a simple protocol (`pod protocol`) that uses standard and battle tested tools (`stdin`, `stdout`, `bencode` and `json`) for it's implementation.\n\nThe main inspiration for this is [Babashka Pods](https://github.com/babashka/pods).\n\nBasically is a command line tool that has an infinite bucle (`while true`)\nthat listen to commands in `stdin` and outputs the results in `stdout`.\n\nNote how every component is fully customizable, so you can implement\nthose with your own tools and configurations.\n\n```mermaid\nsequenceDiagram\n    Pod Client->>+Pod Service: {:ok, \"start\"}\n    Pod Service-->>-Pod Client: {:ok, os_pid}\n    Pod Client->>+Pod Service: {:ok, {os_pid, \"describe\"}}\n    Pod Service-->>-Pod Client: {:ok, description}\n    Pod Client->>+Pod Service: {:ok, {os_pid, {\"invoke\", params}}}\n    Pod Service-->>-Pod Client: {:ok, result}\n    Pod Client->>+Pod Service: {:ok, {os_pid, \"shutdown\"}}\n    Pod Service-->>-Pod Client: {:ok, \"stop\"}\n```","ref":"readme.html","title":"Elixir Pods","type":"extras"},{"doc":"You can implement the pods with any technology and a simple _Elixir_ wrapper to expose their API.\n\n- `artifacts`: The directory where the external code executables will be stored.\n- `pod.ex`: The main public api for the pod.\n- `manifest.ex`: Some helper functions to have more information about the pod.\n\nIf you want to debug you can use standard tools such as stdin and stdout. In Unix systems you can access by using (1 stdout, 2 stderr).\n\n```bash\n  cat /proc/ /fd/1\n```\n\nAn _Elixir Pod_ must follow some simple rules:\n\n- An infinite function (`while true`).\n- Reads from `stdin` (in streaming mode).\n- Writes to `stdout` (success and errors) and `stderr` (exceptions).\n- Follows [Elixir Pods](POD_PROTOCOL.md) format.\n- At least implements the `describe` and `invoke` operators.\n- Encodes messages with [bencode](https://en.wikipedia.org/wiki/Bencode).\n- Encodes payload with _JSON_.","ref":"readme.html#implementing-a-pod","title":"Implementing a Pod - Elixir Pods","type":"extras"},{"doc":"If [available in Hex](https://hex.pm/docs/publish), the package can be installed\nby adding `pods` to your list of dependencies in `mix.exs`:\n\n```elixir\ndef deps do\n  [\n    {:pods, \"~> 1.0.0\"}\n  ]\nend\n```\n\nDocumentation can be generated with [ExDoc](https://github.com/elixir-lang/ex_doc)\nand published on [HexDocs](https://hexdocs.pm). Once published, the docs can\nbe found at  .","ref":"readme.html#installation","title":"Installation - Elixir Pods","type":"extras"},{"doc":"# Mozilla Public License Version 2.0","ref":"license.html","title":"Mozilla Public License Version 2.0","type":"extras"},{"doc":"**1.1. “Contributor”**\nmeans each individual or legal entity that creates, contributes to\nthe creation of, or owns Covered Software.\n\n**1.2. “Contributor Version”**\nmeans the combination of the Contributions of others (if any) used\nby a Contributor and that particular Contributor's Contribution.\n\n**1.3. “Contribution”**\nmeans Covered Software of a particular Contributor.\n\n**1.4. “Covered Software”**\nmeans Source Code Form to which the initial Contributor has attached\nthe notice in Exhibit A, the Executable Form of such Source Code\nForm, and Modifications of such Source Code Form, in each case\nincluding portions thereof.\n\n**1.5. “Incompatible With Secondary Licenses”**\nmeans\n\n- **(a)** that the initial Contributor has attached the notice described\n  in Exhibit B to the Covered Software; or\n- **(b)** that the Covered Software was made available under the terms of\n  version 1.1 or earlier of the License, but not also under the\n  terms of a Secondary License.\n\n**1.6. “Executable Form”**\nmeans any form of the work other than Source Code Form.\n\n**1.7. “Larger Work”**\nmeans a work that combines Covered Software with other material, in\na separate file or files, that is not Covered Software.\n\n**1.8. “License”**\nmeans this document.\n\n**1.9. “Licensable”**\nmeans having the right to grant, to the maximum extent possible,\nwhether at the time of the initial grant or subsequently, any and\nall of the rights conveyed by this License.\n\n**1.10. “Modifications”**\nmeans any of the following:\n\n- **(a)** any file in Source Code Form that results from an addition to,\n  deletion from, or modification of the contents of Covered\n  Software; or\n- **(b)** any new file in Source Code Form that contains any Covered\n  Software.\n\n**1.11. “Patent Claims” of a Contributor**\nmeans any patent claim(s), including without limitation, method,\nprocess, and apparatus claims, in any patent Licensable by such\nContributor that would be infringed, but for the grant of the\nLicense, by the making, using, selling, offering for sale, having\nmade, import, or transfer of either its Contributions or its\nContributor Version.\n\n**1.12. “Secondary License”**\nmeans either the GNU General Public License, Version 2.0, the GNU\nLesser General Public License, Version 2.1, the GNU Affero General\nPublic License, Version 3.0, or any later versions of those\nlicenses.\n\n**1.13. “Source Code Form”**\nmeans the form of the work preferred for making modifications.\n\n**1.14. “You” (or “Your”)**\nmeans an individual or a legal entity exercising rights under this\nLicense. For legal entities, “You” includes any entity that\ncontrols, is controlled by, or is under common control with You. For\npurposes of this definition, “control” means **(a)** the power, direct\nor indirect, to cause the direction or management of such entity,\nwhether by contract or otherwise, or **(b)** ownership of more than\nfifty percent (50%) of the outstanding shares or beneficial\nownership of such entity.","ref":"license.html#1-definitions","title":"1. Definitions - Mozilla Public License Version 2.0","type":"extras"},{"doc":"#### 2.1. Grants\n\nEach Contributor hereby grants You a world-wide, royalty-free,\nnon-exclusive license:\n\n- **(a)** under intellectual property rights (other than patent or trademark)\n  Licensable by such Contributor to use, reproduce, make available,\n  modify, display, perform, distribute, and otherwise exploit its\n  Contributions, either on an unmodified basis, with Modifications, or\n  as part of a Larger Work; and\n- **(b)** under Patent Claims of such Contributor to make, use, sell, offer\n  for sale, have made, import, and otherwise transfer either its\n  Contributions or its Contributor Version.\n\n#### 2.2. Effective Date\n\nThe licenses granted in Section 2.1 with respect to any Contribution\nbecome effective for each Contribution on the date the Contributor first\ndistributes such Contribution.\n\n#### 2.3. Limitations on Grant Scope\n\nThe licenses granted in this Section 2 are the only rights granted under\nthis License. No additional rights or licenses will be implied from the\ndistribution or licensing of Covered Software under this License.\nNotwithstanding Section 2.1(b) above, no patent license is granted by a\nContributor:\n\n- **(a)** for any code that a Contributor has removed from Covered Software;\n  or\n- **(b)** for infringements caused by: **(i)** Your and any other third party's\n  modifications of Covered Software, or **(ii)** the combination of its\n  Contributions with other software (except as part of its Contributor\n  Version); or\n- **(c)** under Patent Claims infringed by Covered Software in the absence of\n  its Contributions.\n\nThis License does not grant any rights in the trademarks, service marks,\nor logos of any Contributor (except as may be necessary to comply with\nthe notice requirements in Section 3.4).\n\n#### 2.4. Subsequent Licenses\n\nNo Contributor makes additional grants as a result of Your choice to\ndistribute the Covered Software under a subsequent version of this\nLicense (see Section 10.2) or under the terms of a Secondary License (if\npermitted under the terms of Section 3.3).\n\n#### 2.5. Representation\n\nEach Contributor represents that the Contributor believes its\nContributions are its original creation(s) or it has sufficient rights\nto grant the rights to its Contributions conveyed by this License.\n\n#### 2.6. Fair Use\n\nThis License is not intended to limit any rights You have under\napplicable copyright doctrines of fair use, fair dealing, or other\nequivalents.\n\n#### 2.7. Conditions\n\nSections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted\nin Section 2.1.","ref":"license.html#2-license-grants-and-conditions","title":"2. License Grants and Conditions - Mozilla Public License Version 2.0","type":"extras"},{"doc":"#### 3.1. Distribution of Source Form\n\nAll distribution of Covered Software in Source Code Form, including any\nModifications that You create or to which You contribute, must be under\nthe terms of this License. You must inform recipients that the Source\nCode Form of the Covered Software is governed by the terms of this\nLicense, and how they can obtain a copy of this License. You may not\nattempt to alter or restrict the recipients' rights in the Source Code\nForm.\n\n#### 3.2. Distribution of Executable Form\n\nIf You distribute Covered Software in Executable Form then:\n\n- **(a)** such Covered Software must also be made available in Source Code\n  Form, as described in Section 3.1, and You must inform recipients of\n  the Executable Form how they can obtain a copy of such Source Code\n  Form by reasonable means in a timely manner, at a charge no more\n  than the cost of distribution to the recipient; and\n\n- **(b)** You may distribute such Executable Form under the terms of this\n  License, or sublicense it under different terms, provided that the\n  license for the Executable Form does not attempt to limit or alter\n  the recipients' rights in the Source Code Form under this License.\n\n#### 3.3. Distribution of a Larger Work\n\nYou may create and distribute a Larger Work under terms of Your choice,\nprovided that You also comply with the requirements of this License for\nthe Covered Software. If the Larger Work is a combination of Covered\nSoftware with a work governed by one or more Secondary Licenses, and the\nCovered Software is not Incompatible With Secondary Licenses, this\nLicense permits You to additionally distribute such Covered Software\nunder the terms of such Secondary License(s), so that the recipient of\nthe Larger Work may, at their option, further distribute the Covered\nSoftware under the terms of either this License or such Secondary\nLicense(s).\n\n#### 3.4. Notices\n\nYou may not remove or alter the substance of any license notices\n(including copyright notices, patent notices, disclaimers of warranty,\nor limitations of liability) contained within the Source Code Form of\nthe Covered Software, except that You may alter any license notices to\nthe extent required to remedy known factual inaccuracies.\n\n#### 3.5. Application of Additional Terms\n\nYou may choose to offer, and to charge a fee for, warranty, support,\nindemnity or liability obligations to one or more recipients of Covered\nSoftware. However, You may do so only on Your own behalf, and not on\nbehalf of any Contributor. You must make it absolutely clear that any\nsuch warranty, support, indemnity, or liability obligation is offered by\nYou alone, and You hereby agree to indemnify every Contributor for any\nliability incurred by such Contributor as a result of warranty, support,\nindemnity or liability terms You offer. You may include additional\ndisclaimers of warranty and limitations of liability specific to any\njurisdiction.","ref":"license.html#3-responsibilities","title":"3. Responsibilities - Mozilla Public License Version 2.0","type":"extras"},{"doc":"If it is impossible for You to comply with any of the terms of this\nLicense with respect to some or all of the Covered Software due to\nstatute, judicial order, or regulation then You must: **(a)** comply with\nthe terms of this License to the maximum extent possible; and **(b)**\ndescribe the limitations and the code they affect. Such description must\nbe placed in a text file included with all distributions of the Covered\nSoftware under this License. Except to the extent prohibited by statute\nor regulation, such description must be sufficiently detailed for a\nrecipient of ordinary skill to be able to understand it.","ref":"license.html#4-inability-to-comply-due-to-statute-or-regulation","title":"4. Inability to Comply Due to Statute or Regulation - Mozilla Public License Version 2.0","type":"extras"},{"doc":"**5.1.** The rights granted under this License will terminate automatically\nif You fail to comply with any of its terms. However, if You become\ncompliant, then the rights granted under this License from a particular\nContributor are reinstated **(a)** provisionally, unless and until such\nContributor explicitly and finally terminates Your grants, and **(b)** on an\nongoing basis, if such Contributor fails to notify You of the\nnon-compliance by some reasonable means prior to 60 days after You have\ncome back into compliance. Moreover, Your grants from a particular\nContributor are reinstated on an ongoing basis if such Contributor\nnotifies You of the non-compliance by some reasonable means, this is the\nfirst time You have received notice of non-compliance with this License\nfrom such Contributor, and You become compliant prior to 30 days after\nYour receipt of the notice.\n\n**5.2.** If You initiate litigation against any entity by asserting a patent\ninfringement claim (excluding declaratory judgment actions,\ncounter-claims, and cross-claims) alleging that a Contributor Version\ndirectly or indirectly infringes any patent, then the rights granted to\nYou by any and all Contributors for the Covered Software under Section\n2.1 of this License shall terminate.\n\n**5.3.** In the event of termination under Sections 5.1 or 5.2 above, all\nend user license agreements (excluding distributors and resellers) which\nhave been validly granted by You or Your distributors under this License\nprior to termination shall survive termination.","ref":"license.html#5-termination","title":"5. Termination - Mozilla Public License Version 2.0","type":"extras"},{"doc":"> Covered Software is provided under this License on an “as is”\n> basis, without warranty of any kind, either expressed, implied, or\n> statutory, including, without limitation, warranties that the\n> Covered Software is free of defects, merchantable, fit for a\n> particular purpose or non-infringing. The entire risk as to the\n> quality and performance of the Covered Software is with You.\n> Should any Covered Software prove defective in any respect, You\n> (not any Contributor) assume the cost of any necessary servicing,\n> repair, or correction. This disclaimer of warranty constitutes an\n> essential part of this License. No use of any Covered Software is\n> authorized under this License except under this disclaimer.","ref":"license.html#6-disclaimer-of-warranty","title":"6. Disclaimer of Warranty - Mozilla Public License Version 2.0","type":"extras"},{"doc":"> Under no circumstances and under no legal theory, whether tort\n> (including negligence), contract, or otherwise, shall any\n> Contributor, or anyone who distributes Covered Software as\n> permitted above, be liable to You for any direct, indirect,\n> special, incidental, or consequential damages of any character\n> including, without limitation, damages for lost profits, loss of\n> goodwill, work stoppage, computer failure or malfunction, or any\n> and all other commercial damages or losses, even if such party\n> shall have been informed of the possibility of such damages. This\n> limitation of liability shall not apply to liability for death or\n> personal injury resulting from such party's negligence to the\n> extent applicable law prohibits such limitation. Some\n> jurisdictions do not allow the exclusion or limitation of\n> incidental or consequential damages, so this exclusion and\n> limitation may not apply to You.","ref":"license.html#7-limitation-of-liability","title":"7. Limitation of Liability - Mozilla Public License Version 2.0","type":"extras"},{"doc":"Any litigation relating to this License may be brought only in the\ncourts of a jurisdiction where the defendant maintains its principal\nplace of business and such litigation shall be governed by laws of that\njurisdiction, without reference to its conflict-of-law provisions.\nNothing in this Section shall prevent a party's ability to bring\ncross-claims or counter-claims.","ref":"license.html#8-litigation","title":"8. Litigation - Mozilla Public License Version 2.0","type":"extras"},{"doc":"This License represents the complete agreement concerning the subject\nmatter hereof. If any provision of this License is held to be\nunenforceable, such provision shall be reformed only to the extent\nnecessary to make it enforceable. Any law or regulation which provides\nthat the language of a contract shall be construed against the drafter\nshall not be used to construe this License against a Contributor.","ref":"license.html#9-miscellaneous","title":"9. Miscellaneous - Mozilla Public License Version 2.0","type":"extras"},{"doc":"#### 10.1. New Versions\n\nMozilla Foundation is the license steward. Except as provided in Section\n10.3, no one other than the license steward has the right to modify or\npublish new versions of this License. Each version will be given a\ndistinguishing version number.\n\n#### 10.2. Effect of New Versions\n\nYou may distribute the Covered Software under the terms of the version\nof the License under which You originally received the Covered Software,\nor under the terms of any subsequent version published by the license\nsteward.\n\n#### 10.3. Modified Versions\n\nIf you create software not governed by this License, and you want to\ncreate a new license for such software, you may create and use a\nmodified version of this License if you rename the license and remove\nany references to the name of the license steward (except to note that\nsuch modified license differs from this License).\n\n#### 10.4. Distributing Source Code Form that is Incompatible With Secondary Licenses\n\nIf You choose to distribute Source Code Form that is Incompatible With\nSecondary Licenses under the terms of this version of the License, the\nnotice described in Exhibit B of this License must be attached.","ref":"license.html#10-versions-of-the-license","title":"10. Versions of the License - Mozilla Public License Version 2.0","type":"extras"},{"doc":"This Source Code Form is subject to the terms of the Mozilla Public\n    License, v. 2.0. If a copy of the MPL was not distributed with this\n    file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\nIf it is not possible or desirable to put the notice in a particular\nfile, then You may include the notice in a location (such as a LICENSE\nfile in a relevant directory) where a recipient would be likely to look\nfor such a notice.\n\nYou may add additional accurate notices of copyright ownership.","ref":"license.html#exhibit-a-source-code-form-license-notice","title":"Exhibit A - Source Code Form License Notice - Mozilla Public License Version 2.0","type":"extras"},{"doc":"This Source Code Form is \"Incompatible With Secondary Licenses\", as\n    defined by the Mozilla Public License, v. 2.0.","ref":"license.html#exhibit-b-incompatible-with-secondary-licenses-notice","title":"Exhibit B - “Incompatible With Secondary Licenses” Notice - Mozilla Public License Version 2.0","type":"extras"},{"doc":"# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to SEMVER.\n\n## [1.0.0](https://github.com/elixircl/pods/releases/tag/v1.0.0) - 2024-05-01","ref":"changelog.html","title":"Changelog","type":"extras"},{"doc":"- First Version.","ref":"changelog.html#features","title":"Features - Changelog","type":"extras"},{"doc":"# Example Elixir Pods\n\n```elixir\nMix.install([\n  {:pods, path: \"./pods\"},\n  {:pod_lispyclouds_sqlite, path: \"./pods/example\"},\n  {:erlexec, \"~> 2.0\"},\n  {:jason, \"~> 1.4\"},\n  {:bento, \"~> 1.0\"}\n])\n\nrequire Logger\n```","ref":"examples.html","title":"Example Elixir Pods","type":"extras"},{"doc":"The example process manager uses https://github.com/saleyn/erlexec/\nbut you can implement the pod services using `System.cmd` or `Erlang Ports`\nor any other solution if you want.\n\nThe only requirement is that it can allow `stdin` and `stdout` interactions.\n\n```elixir\ndefmodule Decoder do\n  use Pods.Decoder\n  def decode(message, \"bencode\"), do: Bento.decode(message)\n  def decode(message, \"json\"), do: Jason.decode(message)\n  def decode!(message, \"bencode\"), do: Bento.decode!(message)\n  def decode!(message, \"json\"), do: Jason.decode!(message)\nend\n\ndefmodule Encoder do\n  use Pods.Encoder\n  def encode(message, \"bencode\"), do: Bento.encode(message)\n  def encode(message, \"json\"), do: Jason.encode(message)\n  def encode!(message, \"bencode\"), do: Bento.encode!(message)\n  def encode!(message, \"json\"), do: Jason.encode!(message)\nend\n\ndefmodule Handler do\n  use Pods.Handler\n\n  def event(payload, type) do\n    Logger.info(\"Got Pod Event #{type}\")\n    Logger.debug(payload)\n  end\n\n  def success(payload) do\n    Logger.info(\"Got Pod Success Response\")\n    Logger.debug(payload)\n  end\n\n  def error(payload) do\n    Logger.info(\"Got Pod Error Response\")\n    Logger.debug(payload)\n  end\n\n  def exception(payload) do\n    Logger.info(\"Got Pod Exception\")\n    Logger.debug(payload)\n  end\nend\n\ndefmodule Manager do\n  use Pods.Manager\n\n  def init() do\n    Logger.info(\"Manager started\")\n    :exec.start()\n  end\n\n  def stop(pod) do\n    Logger.info(\"Stopping Pod #{pod.module}\")\n    :exec.stop(pod.pid)\n  end\n\n  def send(pod, message) do\n    Logger.info(\"Sending Message to Pod #{pod.module}\")\n    :exec.send(pod.pid, message)\n  end\n\n  def start(executable, decoder, out_handler, exception_handler, opts \\\\ []) do\n    temp_dir = System.tmp_dir!()\n    temp_file_stdout = Path.join([temp_dir, Path.basename(executable) <> \".stdout\"])\n\n    # Some processes may write a lot of text (streams), so we try to decode a cache\n    # until it works and then send the data to the handler\n    # maybe a better solution exists, but it works for now.\n    # can be a genserver? or maybe mnesia?\n    stdout_watcher = fn origin, pid, response ->\n      File.write!(temp_file_stdout, response, [:append])\n\n      case decoder.decode(String.trim(File.read!(temp_file_stdout)), \"bencode\") do\n        {:ok, _data} ->\n          out_handler.(%{origin: origin, pid: pid, response: response})\n          File.rm_rf!(temp_file_stdout)\n\n        _ ->\n          nil\n      end\n    end\n\n    # exceptions may not be in bencode, so we send the raw response\n    stderr_watcher = fn origin, pid, response ->\n      exception_handler.(%{origin: origin, pid: pid, response: response})\n    end\n\n    # start the process with ELIXIR_POD in the env\n    case :exec.run_link(\n           executable,\n           [\n             :stdin,\n             {:stdout, stdout_watcher},\n             {:stderr, stderr_watcher},\n             :monitor,\n             {:env, [{\"ELIXIR_POD\", \"1\"}]}\n           ] ++ opts\n         ) do\n      {:ok, _, pid} -> {:ok, pid}\n      _ = error -> {:error, error}\n    end\n  end\nend\n```\n\n<!-- livebook:{\"output\":true} -->\n\n```\n{:module, Manager, <<70, 79, 82, 49, 0, 0, 20, ...>>, {:start, 5}}\n```","ref":"examples.html#example-client","title":"Example Client - Example Elixir Pods","type":"extras"},{"doc":"```elixir\n# Start the Pods Services\npods =\n  Pods.start(\n    # Available Pods List\n    [Pod.LispyClouds.SQLite],\n    # Pod Manager\n    Manager,\n    # Message Encoder\n    Encoder,\n    # Message Decoder\n    Decoder,\n    # stdout and stderr handler\n    Handler\n  )\n\n# Use the Pods\npods\n|> Pod.LispyClouds.SQLite.execute!(\"create table if not exists foo ( int foo )\")\n|> Pod.LispyClouds.SQLite.execute!(\"delete from foo\")\n|> Pod.LispyClouds.SQLite.execute!(\"insert into foo values (1), (2)\")\n|> Pod.LispyClouds.SQLite.execute!(\"select * from foo\")\n|> then(fn pods ->\n  # Give a little time to complete the operations\n  receive do\n  after\n    2000 ->\n      Pods.stop(pods, :all)\n  end\nend)\n```\n\n<!-- livebook:{\"output\":true} -->\n\n```\n\n16:01:26.921 [info] Manager started\n\n16:01:26.925 [info] Got Pod Event before_op\n\n16:01:26.925 [debug] [args: [], command: \"\", id: \"018f35bf-658d-744e-90dd-36a92005b5f7\", message: \"d2:id36:018f35bf-658d-744e-90dd-36a92005b5f72:op8:describee\", op: \"describe\", result: %{}, pod: %{module: Pod.LispyClouds.SQLite, pid: 7915, manifest: Pod.LispyClouds.SQLite.Manifest}]\n\n16:01:26.925 [info] Sending Message to Pod Elixir.Pod.LispyClouds.SQLite\n\n16:01:26.925 [info] Got Pod Event ready\n\n16:01:26.925 [debug] [args: [], command: \"\", id: \"018f35bf-658d-744e-90dd-36a92005b5f7\", message: \"d2:id36:018f35bf-658d-744e-90dd-36a92005b5f72:op8:describee\", op: \"describe\", result: :ok, pod: %{module: Pod.LispyClouds.SQLite, pid: 7915, manifest: Pod.LispyClouds.SQLite.Manifest}]\n\n16:01:26.926 [info] Invoke command in Pod\n\n16:01:26.926 [debug] [args: [\"create table if not exists foo ( int foo )\"], command: \"execute!\", module: Pod.LispyClouds.SQLite]\n\n16:01:26.926 [info] Got Pod Event before_op\n\n16:01:26.926 [debug] [args: [\"create table if not exists foo ( int foo )\"], command: \"pod.lispyclouds.sqlite/execute!\", id: \"018f35bf-658e-7ac6-ad20-3eaadd97065d\", message: \"d4:args46:[\\\"create table if not exists foo ( int foo )\\\"]2:id36:018f35bf-658e-7ac6-ad20-3eaadd97065d2:op6:invoke3:var31:pod.lispyclouds.sqlite/execute!e\", op: \"invoke\", result: %{}, pod: %{module: Pod.LispyClouds.SQLite, pid: 7915, manifest: Pod.LispyClouds.SQLite.Manifest}]\n\n16:01:26.926 [info] Sending Message to Pod Elixir.Pod.LispyClouds.SQLite\n\n16:01:26.927 [info] Got Pod Event after_op\n\n16:01:26.927 [debug] [args: [\"create table if not exists foo ( int foo )\"], command: \"pod.lispyclouds.sqlite/execute!\", id: \"018f35bf-658e-7ac6-ad20-3eaadd97065d\", message: \"d4:args46:[\\\"create table if not exists foo ( int foo )\\\"]2:id36:018f35bf-658e-7ac6-ad20-3eaadd97065d2:op6:invoke3:var31:pod.lispyclouds.sqlite/execute!e\", op: \"invoke\", result: :ok, pod: %{module: Pod.LispyClouds.SQLite, pid: 7915, manifest: Pod.LispyClouds.SQLite.Manifest}]\n\n16:01:26.927 [info] Invoke command in Pod\n\n16:01:26.927 [debug] [args: [\"delete from foo\"], command: \"execute!\", module: Pod.LispyClouds.SQLite]\n\n16:01:26.927 [info] Got Pod Event before_op\n\n16:01:26.927 [debug] [args: [\"delete from foo\"], command: \"pod.lispyclouds.sqlite/execute!\", id: \"018f35bf-658f-761a-ad35-f9da6d1a0384\", message: \"d4:args19:[\\\"delete from foo\\\"]2:id36:018f35bf-658f-761a-ad35-f9da6d1a03842:op6:invoke3:var31:pod.lispyclouds.sqlite/execute!e\", op: \"invoke\", result: %{}, pod: %{module: Pod.LispyClouds.SQLite, pid: 7915, manifest: Pod.LispyClouds.SQLite.Manifest}]\n\n16:01:26.927 [info] Sending Message to Pod Elixir.Pod.LispyClouds.SQLite\n\n16:01:26.928 [info] Got Pod Event after_op\n\n16:01:26.928 [debug] [args: [\"delete from foo\"], command: \"pod.lispyclouds.sqlite/execute!\", id: \"018f35bf-658f-761a-ad35-f9da6d1a0384\", message: \"d4:args19:[\\\"delete from foo\\\"]2:id36:018f35bf-658f-761a-ad35-f9da6d1a03842:op6:invoke3:var31:pod.lispyclouds.sqlite/execute!e\", op: \"invoke\", result: :ok, pod: %{module: Pod.LispyClouds.SQLite, pid: 7915, manifest: Pod.LispyClouds.SQLite.Manifest}]\n\n16:01:26.928 [info] Invoke command in Pod\n\n16:01:26.928 [debug] [args: [\"insert into foo values (1), (2)\"], command: \"execute!\", module: Pod.LispyClouds.SQLite]\n\n16:01:26.928 [info] Got Pod Event before_op\n\n16:01:26.928 [debug] [args: [\"insert into foo values (1), (2)\"], command: \"pod.lispyclouds.sqlite/execute!\", id: \"018f35bf-6590-7694-a2f5-b45d6c1f3396\", message: \"d4:args35:[\\\"insert into foo values (1), (2)\\\"]2:id36:018f35bf-6590-7694-a2f5-b45d6c1f33962:op6:invoke3:var31:pod.lispyclouds.sqlite/execute!e\", op: \"invoke\", result: %{}, pod: %{module: Pod.LispyClouds.SQLite, pid: 7915, manifest: Pod.LispyClouds.SQLite.Manifest}]\n\n16:01:26.928 [info] Sending Message to Pod Elixir.Pod.LispyClouds.SQLite\n\n16:01:26.928 [info] Got Pod Event after_op\n\n16:01:26.928 [debug] [args: [\"insert into foo values (1), (2)\"], command: \"pod.lispyclouds.sqlite/execute!\", id: \"018f35bf-6590-7694-a2f5-b45d6c1f3396\", message: \"d4:args35:[\\\"insert into foo values (1), (2)\\\"]2:id36:018f35bf-6590-7694-a2f5-b45d6c1f33962:op6:invoke3:var31:pod.lispyclouds.sqlite/execute!e\", op: \"invoke\", result: :ok, pod: %{module: Pod.LispyClouds.SQLite, pid: 7915, manifest: Pod.LispyClouds.SQLite.Manifest}]\n\n16:01:26.929 [info] Invoke command in Pod\n\n16:01:26.938 [debug] [args: [\"select * from foo\"], command: \"execute!\", module: Pod.LispyClouds.SQLite]\n\n16:01:26.938 [info] Got Pod Event before_op\n\n16:01:26.938 [debug] [args: [\"select * from foo\"], command: \"pod.lispyclouds.sqlite/execute!\", id: \"018f35bf-659a-7bf8-b912-098a0b14c8dc\", message: \"d4:args21:[\\\"select * from foo\\\"]2:id36:018f35bf-659a-7bf8-b912-098a0b14c8dc2:op6:invoke3:var31:pod.lispyclouds.sqlite/execute!e\", op: \"invoke\", result: %{}, pod: %{module: Pod.LispyClouds.SQLite, pid: 7915, manifest: Pod.LispyClouds.SQLite.Manifest}]\n\n16:01:26.939 [info] Sending Message to Pod Elixir.Pod.LispyClouds.SQLite\n\n16:01:26.939 [info] Got Pod Event after_op\n\n16:01:26.939 [debug] [args: [\"select * from foo\"], command: \"pod.lispyclouds.sqlite/execute!\", id: \"018f35bf-659a-7bf8-b912-098a0b14c8dc\", message: \"d4:args21:[\\\"select * from foo\\\"]2:id36:018f35bf-659a-7bf8-b912-098a0b14c8dc2:op6:invoke3:var31:pod.lispyclouds.sqlite/execute!e\", op: \"invoke\", result: :ok, pod: %{module: Pod.LispyClouds.SQLite, pid: 7915, manifest: Pod.LispyClouds.SQLite.Manifest}]\n\n16:01:27.047 [info] Got Pod Success Response\n\n16:01:27.048 [debug] [id: 7915, raw: %{pid: 7915, origin: :stdout, response: \"d6:format4:json10:namespacesld4:name22:pod.lispyclouds.sqlite4:varsld4:name8:execute!eeeee\"}, status: :ok, result: [], pod: %{module: Pod.LispyClouds.SQLite, pid: 7915, manifest: Pod.LispyClouds.SQLite.Manifest}]\n\n16:01:27.050 [info] Got Pod Success Response\n\n16:01:27.050 [debug] [id: \"018f35bf-658e-7ac6-ad20-3eaadd97065d\", raw: %{pid: 7915, origin: :stdout, response: \"d2:id36:018f35bf-658e-7ac6-ad20-3eaadd97065d6:statusl4:donee5:value2:[]e\"}, status: :ok, result: [], pod: %{module: Pod.LispyClouds.SQLite, pid: 7915, manifest: Pod.LispyClouds.SQLite.Manifest}]\n\n16:01:27.052 [info] Got Pod Success Response\n\n16:01:27.052 [debug] [id: \"018f35bf-658f-761a-ad35-f9da6d1a0384\", raw: %{pid: 7915, origin: :stdout, response: \"d2:id36:018f35bf-658f-761a-ad35-f9da6d1a03846:statusl4:donee5:value2:[]e\"}, status: :ok, result: [], pod: %{module: Pod.LispyClouds.SQLite, pid: 7915, manifest: Pod.LispyClouds.SQLite.Manifest}]\n\n16:01:27.055 [info] Got Pod Success Response\n\n16:01:27.055 [debug] [id: \"018f35bf-6590-7694-a2f5-b45d6c1f3396\", raw: %{pid: 7915, origin: :stdout, response: \"d2:id36:018f35bf-6590-7694-a2f5-b45d6c1f33966:statusl4:donee5:value2:[]e\"}, status: :ok, result: [], pod: %{module: Pod.LispyClouds.SQLite, pid: 7915, manifest: Pod.LispyClouds.SQLite.Manifest}]\n\n16:01:27.058 [info] Got Pod Success Response\n\n16:01:27.058 [debug] [id: \"018f35bf-659a-7bf8-b912-098a0b14c8dc\", raw: %{pid: 7915, origin: :stdout, response: \"d2:id36:018f35bf-659a-7bf8-b912-098a0b14c8dc6:statusl4:donee5:value10:[[1], [2]]e\"}, status: :ok, result: [[1], [2]], pod: %{module: Pod.LispyClouds.SQLite, pid: 7915, manifest: Pod.LispyClouds.SQLite.Manifest}]\n\n16:01:28.940 [info] Stopping all pods\n\n16:01:28.940 [info] Stopping Pod Elixir.Pod.LispyClouds.SQLite\n\n```\n\n<!-- livebook:{\"output\":true} -->\n\n```\n[%{pid: 7915, stop: :ok, pod: Pod.LispyClouds.SQLite}]\n```","ref":"examples.html#example-pod-usage","title":"Example Pod Usage - Example Elixir Pods","type":"extras"},{"doc":"# Elixir Pods Authors\n\n_Elixir Pods_ was originally written by _Camilo Castro_ and is currently developed and maintained by [Elixir Chile](https://elixircl.github.io/).\n\n_Elixir Pods_ is a collective work with contributions from many people, including:\n\n- Camilo Castro (@clsource)\n- Elixir Chile Collaborators.\n\nThanks!","ref":"authors.html","title":"Elixir Pods Authors","type":"extras"},{"doc":"# Elixir Pods: Pod Protocol\n\nThis protocol is adapted from [Babashka Pods](https://github.com/babashka/pods).\nThis protocol must be implemented by any _Pod Service_.\n\nThe _Pod Client_ (`client`) is the _Elixir_ code that connects to the _Pod Service_ (`pod`).\n\nExchange of messages between pod client and the pod happens in the bencode format. [Bencode](https://en.wikipedia.org/wiki/Bencode) is a bare-bones format that only has four types:\n\n- integers\n- lists\n- dictionaries (maps)\n- byte strings\n\nThe recommended library for processing _Bencode_ in _Elixir_ is [https://github.com/folz/bento](https://github.com/folz/bento).\n\nAdditionally, payloads like args (arguments) or value (a function return value) are encoded in either _JSON_ or _Transit JSON_ (depends on the pod implementation).","ref":"pod_protocol.html","title":"Elixir Pods: Pod Protocol","type":"extras"},{"doc":"The pod client will set the `ELIXIR_POD` environment variable to `true` when starting the pod. This can be used by the service program (`pod`) to determine whether it should behave as a pod or not.","ref":"pod_protocol.html#environment","title":"Environment - Elixir Pods: Pod Protocol","type":"extras"},{"doc":"Operands must be implemented on each `pod`.\nOperands executes without a namespace and arguments.\nThere are three main operands `describe`, `invoke` and `shutdown`.\n\n### `describe`\n\nThis operand will return the description of the `pod`. It's the first\noperand that will be called after the start of the service by the pod client.\n\nThe following is a `map` with example `describe` for the `demo pod`.\nNote that the final response will be encoded in `bencode`.\n\n**call**\n\n```elixir\n%{\n  op: \"describe\",\n  id: \"018f2732-9ce5-726a-a1b4-acb86c3099c6\" # uuidv7\n}\n|> Bento.encode!()\n```\n\n**response**\n\n```elixir\n%{\n  format: \"json\",\n  id: \"018f2732-9ce5-726a-a1b4-acb86c3099c6\" # same as the called operation\n  namespaces: [\n    %{\n      name: \"pod.example.demo\",\n      vars: [\n        %{\n          name: \"add\",\n          meta: %{\n            shortdoc: \"arithmetic addition of 2 arguments\",\n            spec: \"(a :: int(), b :: int()) :: int()\"\n          }\n      }]\n    }\n  ]\n}\n|> Bento.encode!()\n```\n\n- `format`: which encoding will used by the payloads and values (`json`).\n- `namespaces`: provides the identifier for all commands.\n- `name`: the name for the namespace.\n- `vars`: functions that the namespace support. In this example, for calling the function `add` the client will send `pod.example.demo/add`.\n- `meta`: optional information about the functions.\n\n### `invoke`\n\nThe `invoke` operand will execute a function defined in `var`, and return it's result (async).\n\n**call**\n\n```elixir\n%{\n  op: \"invoke\",\n  id: \"018f277a-7ccc-7678-8b8b-10bbc7374c05\",\n  var: \"com.example.pod/add\",\n  args: [1, 2],\n  opts: [] # additional options\n}\n|> Bento.encode!()\n```\n\n**response**\n\nThe successful response will have `status: :ok` and a `value` with the result of the function.\n\n```elixir\n%{\n  id: \"018f277a-7ccc-7678-8b8b-10bbc7374c05\",\n  var: \"com.example.pod/add\",\n  value: 3,\n  status: :ok\n}\n|> Bento.encode!()\n```\n\n**error response**\n\nIf the operation was terminated with error, the response will have `status: :error`, sent to `stdout` and can be similar to:\n\n```elixir\n%{\n  id: \"018f277a-7ccc-7678-8b8b-10bbc7374c05\",\n  var: \"com.example.pod/add\",\n  error: %{\n    code: \"com.example.pod/errors/403\", # can be any value, maybe http codes would be good\n    message: \"Illegal input\",\n    data: %{\n      input: [\"one\"], # the params received\n      opts: []\n    }\n  }\n  status: :error\n}\n|> Bento.encode!()\n```\n\n### `shutdown`\n\nThe `shutdown` operand can optionally be included in the `pod` service. It is\ncalled by the `pod client` when it requires the pod to stop.\n\nThe client will kill the `pod` in two contexts:\n\n1. When the client stops, all pods will be killed.\n2. When the client receives the `shutdown` response from the `pod`.\n\n**call**\n\n```elixir\n%{\n  op: \"shutdown\",\n  id: \"018f279a-e1a7-7b7c-a3b5-7e469faa6ee2\" # uuidv7\n}\n|> Bento.encode!()\n```\n\n**response**\n\nThe `pod` will send the `shutdown` response payload when is ready to be killed by the process manager, upon receiving this respose the pod client process manager will kill the pod process by its `pid`.\n\n```elixir\n%{\n  id: \"018f279a-e1a7-7b7c-a3b5-7e469faa6ee2\",\n  op: \"shutdown\",\n  status: :ok\n}\n|> Bento.encode!()\n```","ref":"pod_protocol.html#operands","title":"Operands - Elixir Pods: Pod Protocol","type":"extras"},{"doc":"### `stdin`\n\nThe `pod` must read from `stdin` (in streams) for input.\n\n### `stdout`\n\nThe `pod` must write to `stdout` for output. `stdout` will be used for both\nsuccess and errors (normal operation results).\n\n### `stderr`\n\nFor exceptions that the `pod` triggers if anything unexpected happends.","ref":"pod_protocol.html#input-and-output","title":"Input and Output - Elixir Pods: Pod Protocol","type":"extras"},{"doc":"The recommended `pod` is a single command that will\nbe an executable. (`chmod +x`).","ref":"pod_protocol.html#permissions","title":"Permissions - Elixir Pods: Pod Protocol","type":"extras"}],"producer":{"name":"ex_doc","version":[48,46,51,50,46,49]}}